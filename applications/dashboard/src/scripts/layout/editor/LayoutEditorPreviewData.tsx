/**
 * @copyright 2009-2022 Vanilla Forums Inc.
 * @license GPL-2.0-only
 */

import { IDiscussion } from "@dashboard/@types/api/discussion";
import { IUserFragment } from "@library/@types/api/users";
import { STORY_LEADERS } from "@library/storybook/storyData";
import { IHomeWidgetItemProps } from "@library/homeWidget/HomeWidgetItem";
import { ILeader } from "@library/leaderboardWidget/LeaderboardWidget";
import { STORY_USER } from "@library/storybook/storyData";
import { ITag } from "@library/features/tags/TagsReducer";
import { IAddPost, PostTypes } from "@library/newPostMenu/NewPostMenu";
import { NewPostMenuPreview } from "@library/newPostMenu/NewPostMenu.preview";
import { ISiteTotalCount, ISiteTotalApiCount } from "@library/siteTotalsWidget/SiteTotals.variables";
import { uuidv4 } from "@vanilla/utils";
export class LayoutEditorPreviewData {
    /**
     * Return some basic static user data in userfragment format.
     */
    public static user(): IUserFragment {
        return {
            userID: 99999999,
            name: "Liza Malzem",
            photoUrl: require("!file-loader!./icons/userphoto.svg").default,
            title: "Product Manager",
            dateLastActive: "2016-07-25 17:51:15",
        };
    }

    /**
     * Return some subcommunities data as an array.
     */
    public static subcommunities(options?: { fallbackImage?: string; fallbackIcon?: string }): IHomeWidgetItemProps[] {
        return [
            {
                description: "This content is generated by users on the site. You can’t update it here.",
                iconUrl: options?.fallbackIcon ? options?.fallbackIcon : undefined,
                imageUrl: options?.fallbackImage,
                name: "Title",
                to: "#",
            },
            {
                description: "This content is generated by users on the site. You can’t update it here.",
                iconUrl: options?.fallbackIcon ? options?.fallbackIcon : undefined,
                imageUrl: options?.fallbackImage,
                name: "Title",
                to: "#",
            },
            {
                description: "This content is generated by users on the site. You can’t update it here.",
                iconUrl: options?.fallbackIcon ? options?.fallbackIcon : undefined,
                imageUrl: options?.fallbackImage,
                name: "Title",
                to: "#",
            },
        ];
    }

    /**
     * Return some category data as an array.
     */
    public static categories(
        itemsNumber: number = 6,
        options?: { fallbackImage?: string; fallbackIcon?: string },
    ): IHomeWidgetItemProps[] {
        let categories: IHomeWidgetItemProps[] = [];

        for (let i = 0; i < itemsNumber; i++) {
            categories.push({
                counts: [
                    { count: 99000, labelCode: "Items" },
                    { count: 99, labelCode: "Other Items" },
                ],
                description: "This content is generated by users on the site. You can’t update it here.",
                iconUrl: options?.fallbackIcon ? options?.fallbackIcon : undefined,
                imageUrl: options?.fallbackImage,
                name: "Title",
                to: "#",
            });
        }

        return categories;
    }

    /**
     * Return mock discussions to be consumed by layout widgets.
     */
    public static discussions(count = 3, includeUnread?: boolean): IDiscussion[] {
        const fakeDiscussions: IDiscussion[] = [
            {
                discussionID: 9999999,
                type: "discussion",
                name: "Discussion Title",
                excerpt: "This content is generated by users on the site. You can’t update it here.",
                url: "#",
                canonicalUrl: "#",
                dateInserted: "2020-10-06T15:30:44+00:00",
                insertUserID: STORY_USER.userID,
                insertUser: STORY_USER,
                lastUser: STORY_USER,
                dateUpdated: "2020-10-06T15:30:44+00:00",
                dateLastComment: "2020-10-06T15:30:44+00:00",
                pinned: false,
                closed: false,
                score: 0,
                countViews: 999,
                countComments: 9999,
                categoryID: 1111111111111111,
                category: {
                    name: "Category 1",
                    url: "#",
                    categoryID: 1111111111111111,
                },
            },
            {
                discussionID: 99999998,
                type: "discussion",
                name: "Discussion Title",
                excerpt: "This content is generated by users on the site. You can’t update it here.",
                url: "#",
                canonicalUrl: "#",
                dateInserted: "2020-10-06T15:30:44+00:00",
                insertUserID: STORY_USER.userID,
                insertUser: STORY_USER,
                lastUser: STORY_USER,
                dateUpdated: "2020-10-06T15:30:44+00:00",
                dateLastComment: "2020-10-06T15:30:44+00:00",
                pinned: false,
                closed: false,
                score: 0,
                countViews: 999,
                countComments: 9999,
                countUnread: includeUnread ? 99 : undefined,
                categoryID: 22222222222222,
                category: {
                    name: "Category 2",
                    url: "#",
                    categoryID: 22222222222222,
                },
            },
            {
                discussionID: 99999991,
                type: "discussion",
                name: "Discussion Title",
                excerpt: "This content is generated by users on the site. You can’t update it here.",
                url: "#",
                canonicalUrl: "#",
                dateInserted: "2020-10-06T15:30:44+00:00",
                insertUserID: STORY_USER.userID,
                insertUser: STORY_USER,
                lastUser: STORY_USER,
                dateUpdated: "2020-10-06T15:30:44+00:00",
                dateLastComment: "2020-10-06T15:30:44+00:00",
                pinned: false,
                closed: false,
                score: 0,
                countViews: 999,
                countComments: 9999,
                categoryID: 33333333333,
                category: {
                    name: "Category 3",
                    url: "#",
                    categoryID: 33333333333,
                },
                tags: [{ tagID: 1111111, name: "User Tag", urlcode: "#" }],
            },
        ];

        let discussions: IDiscussion[] = [];

        for (let i = 0; i < count; i++) {
            discussions.push({
                ...fakeDiscussions[i % fakeDiscussions.length],
                discussionID: uuidv4(),
            });
        }

        return discussions;
    }

    /*
     * Return mock data to be consumed by the Leaderboard Widget.
     * @returns ILeader[]
     */
    public static leaders(): ILeader[] {
        return STORY_LEADERS.slice(0, 6);
    }

    /*
     * Return mock data to be consumed by the Online Widget.
     */
    public static users(): IUserFragment[] {
        return STORY_LEADERS.slice(0, 6).map(({ user }) => user);
    }

    /**
     * Returns a single tag
     */
    static createTag(name: string, tagID: number, overrides?: any): ITag {
        return {
            tagID,
            name,
            urlcode: name,
            ...overrides,
        };
    }

    /**
     * Returns mock tags based off the tag names specified,
     * defaults to "support", "product", "success", "sales", "user-experience", "api"
     */
    public static tags(tagNames?: string[]): ITag[] {
        return (tagNames ?? ["Support", "Product", "Success", "Sales", "User Experience", "API"]).map(
            (name: string, index: number) => this.createTag(name, index),
        );
    }

    /**
     * Return mock data to be consumed by the New Post Widget.
     * @returns IAddPost[]
     */
    public static getPostTypes(options: React.ComponentProps<typeof NewPostMenuPreview>): IAddPost[] {
        const asOwnButtonsList = options.asOwnButtons ?? [];
        const customLabels = options.customLabels ?? [];
        const excludedButtons = options.excludedButtons ?? [];

        const postTypes = {
            discussion: {
                label: customLabels["discussion"] ?? "New Discussion",
                action: "#",
                type: PostTypes.LINK,
                id: "new-discussion",
                icon: "new-discussion",
                asOwnButton: !!asOwnButtonsList.find((postType) => postType === "discussion"),
            },
            question: {
                label: customLabels["question"] ?? "Ask a Question",
                action: "#",
                type: PostTypes.LINK,
                id: "ask-a-question",
                icon: "new-question",
                asOwnButton: !!asOwnButtonsList.find((postType) => postType === "question"),
            },
            idea: {
                label: customLabels["idea"] ?? "New Idea",
                action: "#",
                type: PostTypes.LINK,
                id: "new-idea",
                icon: "new-idea",
                asOwnButton: !!asOwnButtonsList.find((postType) => postType === "idea"),
            },
            poll: {
                label: customLabels["poll"] ?? "New Poll",
                action: "#",
                type: PostTypes.LINK,
                id: "new-poll",
                icon: "new-poll",
                asOwnButton: !!asOwnButtonsList.find((postType) => postType === "poll"),
            },
            event: {
                label: customLabels["event"] ?? "New Event",
                action: "#",
                type: PostTypes.LINK,
                id: "new-event",
                icon: "new-event",
                asOwnButton: !!asOwnButtonsList.find((postType) => postType === "event"),
            },
        };

        excludedButtons.forEach((button) => {
            delete postTypes[button];
        });

        return Object.values(postTypes);
    }

    /**
     * Return mock data to be consumed by the Site Totals Widget.
     * @returns ISiteTotalCount[]
     */
    public static getSiteTotals(counts: ISiteTotalApiCount[] = []): ISiteTotalCount[] {
        const iconMap = {
            accepted: "search-answered",
            article: "data-article",
            category: "search-categories",
            comment: "search-discussion",
            discussion: "reaction-comments",
            event: "search-events",
            group: "search-groups",
            knowledgeBase: "search-kb",
            onlineUser: "data-online",
            onlineMember: "search-members",
            post: "search-post-count",
            question: "search-questions",
            user: "search-members",
        };
        return counts
            .filter((item) => !item.isHidden)
            .map((item) => ({
                ...item,
                count: 99999,
                isCalculating: false,
                isFiltered: false,
                iconName: iconMap[item.recordType],
            }));
    }
}
